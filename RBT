void RBT_RebuildAfterInsert(RBTNode** Root, RBTNode* X)
{
    while(X!= (*Root) && X->Parent->Color == RED)
    {
        if (X->Parent == X->Parent->Parent->Left) // 부모가 왼쪽 노드일 때
        {
            RBTNode* Uncle = X->Parent->Parent->Right; // 조부모의 오른쪽 자식을 삼촌으로 지정
            if(Uncle->Color == RED) // 삼촌이 빨간색일 때
            {
                X->Parent->Color == BLACK;
                Uncle->Color = BLACK; // 부모와 삼촌 색을 모두 검정으로 바꿈
                X->Parent->Parent->Color = RED; // 조부모의 색을 빨강으로 바꿈

                X=X->Parent->Parent; //X에 조부모(빨강)를 넣음 => 조부모에서 while문 반복
            }
            else // 삼촌이 검정색일 때
            {
                if(X == X->Parent->Right) //X가 오른쪽 노드일 때
                {
                    X = X->Parent; //X를 부모 노드로 바꿈(Rotate는 매개변수가 부모)
                    RBT_RotateLeft(Root, X); //왼쪽으로 회전, X는 다시 자식노드가 됨
                }
                //X는 왼쪽 자식 노드, 부모는 붉은색 노드
                X->Parent->Color = BLACK;
                //부모색 검정
                X->Parent->Parent->Color = RED;
                //조부모 빨강

                RBT_RotateRight(Root, X->Parent->Parent);
                //조부모 노드를 기준으로 오른쪽 회전
            }
        }
        else //부모가 오른쪽 노드일 때
        {
            RBTNode* Uncle = X->Parent->Parent->Left;
            if(Uncle->Color == RED)
            {
                X->Parent->Color = BLACK;
                Uncle->Color = BLACK;
                X->Parent->Parent->Color = RED;

                X= X->Parent->Parent;
            }
            else
            {
                if(X == X->Parent->Left)
                {
                    X = X->Parent;
                    RBT_RotateRigh(Root, X);
                }

                X->Parent->Color = BLACK;
                X->Parent->Parent->Color = RED;
                RBT_RotateLeft(Root, X->Parent->Parent);
            }
        }
    }

    (*Root)->Color = BLACK;
}
